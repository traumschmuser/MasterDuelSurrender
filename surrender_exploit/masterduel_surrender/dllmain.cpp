#include <Windows.h>
#include <iostream>

HINSTANCE dllHandle;
uintptr_t gameAssembly;
FILE* stream;

void PVP_ComDoCommand(int player, int position, int index, int commandId)
{
	uintptr_t address = gameAssembly + 0x62BC00; //void YgomGame.Duel.Engine.PVP_ComDoCommand(int player, int position, int index, int commandId)

	return ((void (*)(int, int, int, int))address)(player, position, index, commandId);
}

bool IsMyself(int player)
{
	uintptr_t address = gameAssembly + 0x627890; //bool YgomGame.Duel.Engine.IsMyself(int player)

	return ((bool (*)(int))address)(player);
}

DWORD exit(std::string output = "\nunloading..\n")
{
	std::cout << output << std::endl;
	Sleep(2000);
	fclose(stream);
	FreeConsole();
	FreeLibraryAndExitThread(dllHandle, 0);
	return NULL;
}

DWORD WINAPI attach()
{
	AllocConsole();
	freopen_s(&stream, "CONOUT$", "w", stdout);

	//get GameAssembly.dll address, if it doesn't even exist -> exit
	gameAssembly = (uintptr_t)GetModuleHandle(L"GameAssembly.dll");
	if (!gameAssembly) exit("GameAssembly.dll not found\n");

	//output text
	std::cout << "**can only be activated on your own turn**\n\n";
	std::cout << "'F1' = surrender opponent\n";
	std::cout << "'F2' = unload tool\n\n";


	//cheat loop
	while (true) {

		//surrender hotkey
		if (GetAsyncKeyState(VK_F1) & 1)
		{
			//send surrender command with the id of the opponent
			if (IsMyself(0)) PVP_ComDoCommand(1, 0, 0, 11);
			else PVP_ComDoCommand(0, 0, 0, 11);
			std::cout << "opponent surrendering..\n";
		}

		//unload hotkey
		if (GetAsyncKeyState(VK_F2) & 1) exit();

		Sleep(1);
	}

	return NULL;
}

BOOL APIENTRY DllMain(HMODULE hModule, DWORD reason_for_call, LPVOID lpResreved)
{
	switch (reason_for_call)
	{
	case DLL_PROCESS_ATTACH:
		dllHandle = hModule;
		DisableThreadLibraryCalls(hModule);
		CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)attach, NULL, NULL, NULL);
		break;
	}
	return TRUE;
}